rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // User profiles and their private subcollections (plans, progress, notifications)
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      match /{subcol=**} {
        // All nested subcollections under a user are accessible only to that user.
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Public lesson plans: readable by anyone, creatable by authenticated users.
    // Only the creator (owner) can update or delete their plan.
    match /public_plans/{planId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.creator == request.auth.uid;

      // Ratings as a subcollection - allow anyone to read ratings, authenticated users
      // may create one rating record tied to their UID.
      match /ratings/{ratingId} {
        allow read: if true;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid
                      && request.resource.data.stars is int
                      && request.resource.data.stars >= 1
                      && request.resource.data.stars <= 5;
        // Prevent updates/deletes of ratings to keep simplicity (server-side logic
        // should allow changing rating by adding a new document or using a cloud function).
        allow update, delete: if false;
      }
    }

    // Notifications collection - owned by a user (field userId)
    match /notifications/{notifId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // lesson_plans stored under users (private by default) but may be public
    match /users/{userId}/lesson_plans/{planId} {
      allow read: if resource.data.isPublic == true || (request.auth != null && request.auth.uid == userId);
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Fallback: deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
